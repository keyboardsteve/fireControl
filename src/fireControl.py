#!/usr/bin/env python
# -*- coding: CP1252 -*-
#
# generated by wxGlade 0.7.2 on Mon Jan 16 17:09:26 2017
#

import wx
import time

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MyFrame1(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame1.__init__
        wx.Frame.__init__(self, *args, **kwds)
        
        self.operatingMode = "Safety"
        self.numChannels = 16
        self.numFireButtonCols = 4
        self.numFireButtonRows = 4
        self.heartbeatPeriod = 500 # delay in milliseconds
        self.heartbeatTimer = wx.Timer(self)
        self.heartbeatTimer.Start(self.heartbeatPeriod, False)
        
        # begin wxGlade: MyFrame1.__init__
        self.mainFrame_statusbar = self.CreateStatusBar(2)
        self.mainNotebook = wx.Notebook(self, wx.ID_ANY, style=wx.NB_LEFT)
        self.mainNotebook_Main = wx.Panel(self.mainNotebook, wx.ID_ANY)
        self.SplashText = wx.StaticText(self.mainNotebook_Main, wx.ID_ANY, _("Instructions are simple.  \nSafety doesn't send any messages.\
 \nTest sends messages, but the far end is in bypass mode - It wont fire the master relays but it will run the wire test on that channel.  \nArm\
 is the scary one."))
        self.Safety = wx.Button(self.mainNotebook_Main, wx.ID_ANY, _("Safety"))
        self.Test = wx.Button(self.mainNotebook_Main, wx.ID_ANY, _("Test"))
        self.Arm = wx.Button(self.mainNotebook_Main, wx.ID_ANY, _("Arm"))
        self.mainNotebook_1thru16 = wx.Panel(self.mainNotebook, wx.ID_ANY)
        for i in range(self.numChannels):
            # This creates all of the fire buttons
            # Originally "self.button_1 = wx.Button(self.mainNotebook_1thru16, wx.ID_ANY, _("1")", etc, etc, etc
            exec('self.button_%s = wx.Button(self.mainNotebook_1thru16, wx.ID_ANY, _("%s"))'%(i+1, i+1))
        self.mainNotebook_Diagnostics = wx.Panel(self.mainNotebook, wx.ID_ANY)
        self.checkbox_TxFilter = wx.CheckBox(self.mainNotebook_Diagnostics, wx.ID_ANY, _("Filter out Heartbeat entries"))
        self.text_ctrl_TxLog = wx.TextCtrl(self.mainNotebook_Diagnostics, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.checkbox_RxFilter = wx.CheckBox(self.mainNotebook_Diagnostics, wx.ID_ANY, _("Filter out Heartbeat entries"))
        self.text_ctrl_RxLog = wx.TextCtrl(self.mainNotebook_Diagnostics, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.button_TestAll = wx.Button(self.mainNotebook_Diagnostics, wx.ID_ANY, _("Test All"))
        self.gauge_TestAll = wx.Gauge(self.mainNotebook_Diagnostics, wx.ID_ANY, 100)
        self.text_ctrl_TestAll = wx.TextCtrl(self.mainNotebook_Diagnostics, wx.ID_ANY, "", style=wx.TE_MULTILINE)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnButton_OperatingMode, self.Safety)
        self.Bind(wx.EVT_BUTTON, self.OnButton_OperatingMode, self.Test)
        self.Bind(wx.EVT_BUTTON, self.OnButton_OperatingMode, self.Arm)
        for i in range(self.numChannels):
            # This binds all of the fire buttons, since there are a lot of them.
            # originally "self.Bind(wx.EVT_BUTTON, self.OnButton_Fire, self.button_2)", etc, etc, etc
            eval("self.Bind(wx.EVT_BUTTON, self.OnButton_Fire, self.button_%s)"%(i+1))
        self.Bind(wx.EVT_CHECKBOX, self.OnCheckbox_TxFilter, self.checkbox_TxFilter)
        self.Bind(wx.EVT_CHECKBOX, self.OnCheckbox_RxFilter, self.checkbox_RxFilter)
        self.Bind(wx.EVT_BUTTON, self.OnButton_TestAll, self.button_TestAll)
        # end wxGlade
        self.Bind(wx.EVT_TIMER, self.OnTimer_Heartbeat, self.heartbeatTimer)


    def __set_properties(self):
        # begin wxGlade: MyFrame1.__set_properties
        self.SetTitle(_("mainFrame"))
        self.SetSize((800, 480))
        self.mainFrame_statusbar.SetStatusWidths([150, -1])

        # statusbar fields
        mainFrame_statusbar_fields = [_("Communication: Failure"), _("Mode: Safety")]
        for i in range(len(mainFrame_statusbar_fields)):
            self.mainFrame_statusbar.SetStatusText(mainFrame_statusbar_fields[i], i)
        self.Safety.SetBackgroundColour(wx.Colour(0, 255, 0))
        self.Test.SetBackgroundColour(wx.Colour(0, 0, 255))
        self.Arm.SetBackgroundColour(wx.Colour(255, 0, 0))
        for i in range(self.numChannels):
            # This loop initializes all the button colors, since there are a lot of them.
            # Originally "self.button_1.SetBackgroundColour(wx.Colour(255, 255, 0))", etc, etc
            #eval("self.button_%s.SetBackgroundColour(wx.Colour(255, 255, 0))"%(i+1))
            eval("self.button_%s.SetBackgroundColour(wx.NamedColour('YELLOW'))"%(i+1))
        self.checkbox_TxFilter.SetValue(1)
        self.checkbox_RxFilter.SetValue(1)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame1.__do_layout
        mainSizer = wx.BoxSizer(wx.VERTICAL)
        sizer_1 = wx.StaticBoxSizer(wx.StaticBox(self.mainNotebook_Diagnostics, wx.ID_ANY, _("Diagnostics Page")), wx.VERTICAL)
        sizer_5 = wx.StaticBoxSizer(wx.StaticBox(self.mainNotebook_Diagnostics, wx.ID_ANY, _("Test")), wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.StaticBoxSizer(wx.StaticBox(self.mainNotebook_Diagnostics, wx.ID_ANY, _("Messages")), wx.HORIZONTAL)
        sizer_4 = wx.StaticBoxSizer(wx.StaticBox(self.mainNotebook_Diagnostics, wx.ID_ANY, _("Rx Log")), wx.VERTICAL)
        sizer_3 = wx.StaticBoxSizer(wx.StaticBox(self.mainNotebook_Diagnostics, wx.ID_ANY, _("Tx Log")), wx.VERTICAL)
        grid_sizer_1thru16 = wx.GridSizer(4, 5, 3, 3)
        sizer_Main = wx.BoxSizer(wx.VERTICAL)
        sizer_7 = wx.StaticBoxSizer(wx.StaticBox(self.mainNotebook_Main, wx.ID_ANY, _("Operating Mode")), wx.HORIZONTAL)
        sizer_Main.Add(self.SplashText, 1, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL | wx.EXPAND, 0)
        sizer_7.Add(self.Safety, 1, wx.EXPAND, 0)
        sizer_7.Add(self.Test, 1, wx.EXPAND, 0)
        sizer_7.Add(self.Arm, 1, wx.EXPAND, 0)
        sizer_Main.Add(sizer_7, 1, wx.EXPAND, 0)
        self.mainNotebook_Main.SetSizer(sizer_Main)
        grid_sizer_1thru16.Add((20, 20), 0, 0, 0)
        grid_sizer_1thru16.Add(self.button_1, 0, wx.ALL | wx.EXPAND, 0)
        grid_sizer_1thru16.Add(self.button_2, 0, wx.ALL | wx.EXPAND, 0)
        grid_sizer_1thru16.Add(self.button_3, 0, wx.ALL | wx.EXPAND, 0)
        grid_sizer_1thru16.Add(self.button_4, 0, wx.ALL | wx.EXPAND, 0)
        grid_sizer_1thru16.Add((20, 20), 0, 0, 0)
        grid_sizer_1thru16.Add(self.button_5, 0, wx.ALL | wx.EXPAND, 0)
        grid_sizer_1thru16.Add(self.button_6, 0, wx.ALL | wx.EXPAND, 0)
        grid_sizer_1thru16.Add(self.button_7, 0, wx.ALL | wx.EXPAND, 0)
        grid_sizer_1thru16.Add(self.button_8, 0, wx.ALL | wx.EXPAND, 0)
        grid_sizer_1thru16.Add((20, 20), 0, 0, 0)
        grid_sizer_1thru16.Add(self.button_9, 0, wx.ALL | wx.EXPAND, 0)
        grid_sizer_1thru16.Add(self.button_10, 0, wx.ALL | wx.EXPAND, 0)
        grid_sizer_1thru16.Add(self.button_11, 0, wx.ALL | wx.EXPAND, 0)
        grid_sizer_1thru16.Add(self.button_12, 0, wx.ALL | wx.EXPAND, 0)
        grid_sizer_1thru16.Add((20, 20), 0, 0, 0)
        grid_sizer_1thru16.Add(self.button_13, 0, wx.ALL | wx.EXPAND, 0)
        grid_sizer_1thru16.Add(self.button_14, 0, wx.ALL | wx.EXPAND, 0)
        grid_sizer_1thru16.Add(self.button_15, 0, wx.ALL | wx.EXPAND, 0)
        grid_sizer_1thru16.Add(self.button_16, 0, wx.ALL | wx.EXPAND, 0)
        self.mainNotebook_1thru16.SetSizer(grid_sizer_1thru16)
        sizer_3.Add(self.checkbox_TxFilter, 0, wx.EXPAND, 0)
        sizer_3.Add(self.text_ctrl_TxLog, 2, wx.EXPAND, 0)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
        sizer_4.Add(self.checkbox_RxFilter, 0, wx.EXPAND, 0)
        sizer_4.Add(self.text_ctrl_RxLog, 2, wx.ALIGN_RIGHT | wx.EXPAND, 0)
        sizer_2.Add(sizer_4, 1, wx.ALIGN_RIGHT | wx.EXPAND, 0)
        sizer_1.Add(sizer_2, 1, wx.ALL | wx.EXPAND, 0)
        sizer_6.Add(self.button_TestAll, 1, wx.EXPAND, 0)
        sizer_6.Add(self.gauge_TestAll, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_5.Add(sizer_6, 1, 0, 0)
        sizer_5.Add(self.text_ctrl_TestAll, 1, wx.EXPAND, 0)
        sizer_1.Add(sizer_5, 1, wx.EXPAND, 0)
        self.mainNotebook_Diagnostics.SetSizer(sizer_1)
        self.mainNotebook.AddPage(self.mainNotebook_Main, _("Main"))
        self.mainNotebook.AddPage(self.mainNotebook_1thru16, _("1-16"))
        self.mainNotebook.AddPage(self.mainNotebook_Diagnostics, _("Diagnostics"))
        mainSizer.Add(self.mainNotebook, 1, wx.EXPAND, 0)
        self.SetSizer(mainSizer)
        self.Layout()
        # end wxGlade

    def OnTimer_Heartbeat(self, event):
        if not self.checkbox_TxFilter.IsChecked():
            self.writeToTxLog("%s Heartbeat message sent (Not really)"%(time.strftime("%m-%d-%y_%H:%M:%S", time.localtime())))

    def OnButton_OperatingMode(self, event):  # wxGlade: MyFrame1.<event_handler>
        print "OnButton_OperatingMode: Mode changed to", event.GetEventObject().LabelText.strip()
        self.operatingMode = event.GetEventObject().LabelText.strip()
        if self.operatingMode == "Arm":
            self.operatingMode = "Armed"
            wx.MessageBox('System is now armed.\nExcercise caution as all channels are active', 'Safety first...', wx.OK | wx.ICON_STOP)
        self.mainFrame_statusbar.SetStatusText("Status: %s"%(self.operatingMode), 1)
        #event.Skip()

    def OnButton_Fire(self, event):  # wxGlade: MyFrame1.<event_handler>
        if self.operatingMode == "Armed" or self.operatingMode == "Test":
            e = event.GetEventObject().LabelText.strip()
            print "OnButton_Fire: Fire Event for button", e
            self.writeToTxLog("%s Fire for channel %s"%(time.strftime("%m-%d-%y_%H:%M:%S", time.localtime()), e))
        #event.Skip()

    def OnCheckbox_TxFilter(self, event):  # wxGlade: MyFrame1.<event_handler>
        print "Toggling logging of TxHeartbeat messages"
        event.Skip()

    def OnCheckbox_RxFilter(self, event):  # wxGlade: MyFrame1.<event_handler>
        print "Event handler 'OnCheckbox_RxFilter' not implemented!"
        event.Skip()

    def OnButton_TestAll(self, event):  # wxGlade: MyFrame1.<event_handler>
        self.gauge_TestAll.SetValue(0)
        self.text_ctrl_TestAll.Clear()
        testList = [True, True, True, True,
                    True, True, True, True,
                    True, True, True, True,
                    True, True, True, False]
        if self.operatingMode == "Safety":
            wx.MessageBox('System is in Safety.  Please change mode to "Test" to test all channels.', 'Safety first...', wx.OK)
        elif self.operatingMode == "Armed":
            wx.MessageBox('System is Armed.  Please change mode to "Test" to test all channels.', 'Safety first...', wx.OK | wx.ICON_ERROR)
        elif self.operatingMode == "Test":
            ###ADDCODE
            # This need to send the proper message and receive a result before moving onto the next test
            for channel in range(1, self.numChannels + 1):
                print "OnButton_TestAll: Testing channel number", channel
                self.text_ctrl_TestAll.AppendText("%s Testing channel number %s "%(time.strftime("%m-%d-%y_%H:%M:%S", time.localtime()),channel))
                if testList[channel-1]:
                    self.text_ctrl_TestAll.AppendText("PASS")
                    self.changeButtonColor(channel, "RED")
                else:
                    self.text_ctrl_TestAll.AppendText("FAIL")
                    self.changeButtonColor(channel, "GREEN")
                self.text_ctrl_TestAll.AppendText("\n")
                self.gauge_TestAll.SetValue(int(channel/self.numChannels)*100)
            if all(testList):
                wx.MessageBox('Test Completed.  All channels passed!', 'Test Complete', wx.OK)
            else:
                wx.MessageBox('Test Completed.  Some channels failed!\nPlease check the logs for more information', 'Test Complete', wx.OK | wx.ICON_ERROR)

        #event.Skip()
        
    def changeButtonColor(self, number, color):
        eval("self.button_%s.SetBackgroundColour(wx.NamedColour('%s'))"%(number, color))
        
    def writeToTxLog(self, msg):
        # Just adds the newline & helps me remember what I'm writing to...
        self.text_ctrl_TxLog.AppendText(msg+'\n')
        
    def writeToRxLog(self, msg):
        # Just adds the newline & helps me remember what I'm writing to...
        self.text_ctrl_RxLog.AppendText(msg+'\n')

# end of class MyFrame1
class MyApp(wx.App):
    def OnInit(self):
        mainFrame = MyFrame1(None, wx.ID_ANY, "")
        self.SetTopWindow(mainFrame)
        mainFrame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    gettext.install("app") # replace with the appropriate catalog name

    app = MyApp(0)
    app.MainLoop()